---
name: Test
on:
  pull_request:
  push:
    branches:
      - master
    paths-ignore:
      - '**/README.md'
jobs:
  molecule:
    name: Molecule
    runs-on: self-hosted

    strategy:
      matrix:
        scenario:
          - default
          - ipv6
          - single_node
      fail-fast: false
    env:
      PYTHON_VERSION: "3.10"

    steps:
      - name: Check out the codebase
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # 3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Virtual Box from Oracle
        run: |
          echo "::group::Virtual Box"
          wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
          echo "deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib" | sudo tee -a /etc/apt/sources.list.d/virtualbox.list
          sudo apt update && sudo apt install -y virtualbox-6.1
          vboxmanage --version
          echo "::endgroup::"

      - name: Install Vagrant
        run: |
          echo "::group::Install Vagrant"
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install -y vagrant
          vagrant version
          echo "::endgroup::"

      - name: Configure VirtualBox
        run: |-
          sudo mkdir -p /etc/vbox
          cat <<EOF | sudo tee -a /etc/vbox/networks.conf > /dev/null
          * 192.168.30.0/24
          * fdad:bad:ba55::/64
          EOF

      - name: Cache pip
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # 3.0.11
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('./requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Vagrant boxes
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # 3.0.11
        with:
          path: |
            ~/.vagrant.d/boxes
          key: vagrant-boxes-${{ hashFiles('**/molecule.yml') }}
          restore-keys: |
            vagrant-boxes

      - name: Download Vagrant boxes for all scenarios
        # To save some cache space, all scenarios share the same cache key.
        # On the other hand, this means that the cache contents should be
        # the same across all scenarios. This step ensures that.
        run: ./.github/download-boxes.sh

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984 # 4.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip' # caching pip dependencies

      - name: Install dependencies
        run: |
          echo "::group::Upgrade pip"
          python3 -m pip install --upgrade pip
          echo "::endgroup::"

          echo "::group::Install Python requirements from requirements.txt"
          python3 -m pip install -r requirements.txt
          echo "::endgroup::"

      - name: Test with molecule
        run: molecule test --scenario-name ${{ matrix.scenario }}
        env:
          ANSIBLE_K3S_LOG_DIR: ${{ runner.temp }}/logs/k3s-ansible/${{ matrix.scenario }}
          ANSIBLE_SSH_RETRIES: 4
          ANSIBLE_TIMEOUT: 60
          PY_COLORS: 1
          ANSIBLE_FORCE_COLOR: 1

      - name: Upload log files
        if: always() # do this even if a step before has failed
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # 3.1.1
        with:
          name: logs
          path: |
            ${{ runner.temp }}/logs

      - name: Delete old box versions
        if: always() # do this even if a step before has failed
        run: vagrant box prune --force
